} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable(data = dad, method = "OBS", Lmax = 80)
bin_width <- (0.23 * (Lmax^0.6), 0)
FrequencyTable <- function(data, bin_width = NULL, method = "sturges", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "OBS") {
# Optimum Bin Size (OBS) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6), 0)
FrequencyTable <- function(data, bin_width = NULL, method = "sturges", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "OBS") {
# Optimum Bin Size (OBS) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6), 0)
FrequencyTable <- function(data, bin_width = NULL, method = "sturges", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "OBS") {
# Optimum Bin Size (OBS) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6))
cat("Calculated bin width using OBS formula:", round(bin_width, 2), "\n")
} else {
stop("Invalid method. Choose 'sturges' or 'OBS'.")
}
} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable(data = dad, method = "OBS", Lmax = 80)
FrequencyTable <- function(data, bin_width = NULL, method = "sturges", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "OBS") {
# Optimum Bin Size (OBS) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6))
cat("Calculated bin width using OBS formula:", round(bin_width, 2), "\n")
} else {
stop("Invalid method. Choose 'sturges' or 'OBS'.")
}
} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable(data = dad, method = "OBS", Lmax = 80, bin_width = 3)
FrequencyTable <- function(data, bin_width = NULL, method = "sturges", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "OBS") {
# Optimum Bin Size (OBS) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6))
cat("Calculated bin width using OBS formula:", round(bin_width, 2), "\n")
} else {
stop("Invalid method. Choose 'sturges' or 'OBS'.")
}
} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable(data = dad, method = "OBS", Lmax = 80)
FrequencyTable(data = dad, Lmax = 80)
FrequencyTable <- function(data, bin_width = NULL, method = "wang", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "OBS") {
# Optimum Bin Size (Wang) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6))
cat("Calculated bin width using OBS formula:", round(bin_width, 2), "\n")
} else {
stop("Invalid method. Choose 'sturges' or 'OBS'.")
}
} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable <- function(data, bin_width = NULL, method = "wang", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "OBS") {
# Optimum Bin Size (Wang) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6))
cat("Calculated bin width using Wang formula:", round(bin_width, 2), "\n")
} else {
stop("Invalid method. Choose 'sturges' or 'OBS'.")
}
} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable(data = dad, Lmax = 80)
FrequencyTable <- function(data, bin_width = NULL, method = "wang", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "wang") {
# Optimum Bin Size (Wang) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6))
cat("Calculated bin width using Wang formula:", round(bin_width, 2), "\n")
} else {
stop("Invalid method. Choose 'sturges' or 'wang'.")
}
} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable(data = dad, Lmax = 80)
FrequencyTable <- function(data, bin_width = NULL, method = "wang", Lmax = NULL) {
# Load necessary datasets within the function
utils::data("ExData", package = "aLBI")
# If data is a dataframe, select the first numeric column and omit NA values
if (is.data.frame(data)) {
data <- data[[1]]  # Select the first numeric column
data <- stats::na.omit(data)  # Remove NA values (import from stats)
}
# Calculate the range
min_length <- min(data, na.rm = TRUE)
max_length <- max(data, na.rm = TRUE)
range_data <- max_length - min_length
# Determine bin width if not provided
if (is.null(bin_width)) {
if (method == "sturges") {
# Sturges' formula
num_classes <- ceiling(1 + 3.322 * log10(length(data)))
bin_width <- ceiling(range_data / num_classes)
cat("Calculated bin width using Sturges' formula:", bin_width, "\n")
} else if (method == "wang") {
# Optimum Bin Size (Wang) formula
if (is.null(Lmax)) {
Lmax <- max_length
message("Lmax not provided. Using maximum observed length: ", Lmax)
}
bin_width <- (0.23 * (Lmax^0.6))
cat("Calculated bin width using Wang formula:", round(bin_width, 2), "\n")
} else {
stop("Invalid method. Choose 'sturges' or 'wang'.")
}
} else {
cat("Using custom bin width:", bin_width, "\n")
}
# Generate bin edges
breaks <- seq(floor(min_length), ceiling(max_length) + bin_width, by = bin_width)
# Create frequency table
freq_table <- data.frame(
Length_Range = cut(data, breaks = breaks, include.lowest = TRUE, right = FALSE),
Frequency = 1
) %>%
dplyr::group_by(Length_Range) %>%
dplyr::summarise(Frequency = sum(Frequency)) %>%
dplyr::ungroup()
# Extract upper limit from each bin
lfreq <- freq_table %>%
dplyr::mutate(
Length = as.numeric(sapply(strsplit(as.character(Length_Range), ","), function(x) {
# Remove brackets and whitespace, and take the upper limit
gsub("[^0-9.]", "", x[2])
}))
) %>%
dplyr::select(Length, Frequency)
output <- list(lfqTable = freq_table, lfreq = lfreq)
return(output)
}
FrequencyTable(data = dad, Lmax = 80)
FrequencyTable(data = dad, method = "wang" Lmax = 80)
FrequencyTable(data = dad, method = "wang" ,Lmax = 80)
FrequencyTable(data = dad, method = "sturges" ,Lmax = 80)
FrequencyTable(data = dad, method = "sturges" ,Lmax = 80, bin_width = 5)
FrequencyTable(data = dad, Lmax = 80)
FrequencyTable(data = dad)
FrequencyTable(data = dad, Lmax = 80)
library(devtools)
library(usethis)
document()
load_all()
rm(list = ls())
load_all()
document()
build_vignettes()
check(document = F)
check(document = F)
check(document = F)
check(document = F)
max(ExData)
build_vignettes()
check(document = F)
check(document = F)
check(document = F)
check(document = F)
document()
check(document = F)
check(document = F)
library(aLBI)
?FrequencyTable
FrequencyTable(data = ExData)
document()
check(document = F)
library(aLBI)
FrequencyTable(data = ExData)
FrequencyTable(data = ExData, method = "sturges")
dadsd <- FrequencyTable(data = ExData, method = "sturges")
dadsd <- FrequencyTable(data = ExData, method = "wang")
dadsd <- FrequencyTable(data = ExData, method = "wang", Lmax = 80)
dadsd <- FrequencyTable(data = ExData, method = "wang", Lmax = 90)
dadsd <- FrequencyTable(data = ExData, method = "wang", Lmax = 120)
